{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["currentEvent","prevEvent","movement_x","movement_y","portal_x","portal_y","temp_portal_x","temp_portal_y","pc1","pc2","pc3","bc1","bc2","bc3","lines","movement","drawing","changing","size","translate_point","p","m","Math","pow","document","documentElement","onmousemove","event","setInterval","abs","screenX","screenY","sqrt","sketch","p5","Line","x","y","px","py","weight","this","setup","createCanvas","windowWidth","windowHeight","stroke","draw","clear","mouseX","mouseY","strokeWeight","console","log","fill","rect","pmouseX","pmouseY","push","i","length","line","max","floor","random","temp","rand_color","noFill","ellipse","Canvas","props","react_default","a","createElement","P5Wrapper_default","addEventListener","e","preventDefault","passive","App","class","canvas","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db7365c1.chunk.js","sourcesContent":["import React from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\n\nvar lines = [];       // all lines\nvar currentEvent, prevEvent;\nvar movement_x, movement_y, movement = 5; // base stroke width is 5\nvar drawing = false;\nvar changing = false;\nvar portal_x, portal_y;\nvar temp_portal_x, temp_portal_y;\nvar pc1, pc2, pc3;\nvar bc1, bc2, bc3;\nvar size = 45;\n\ndocument.documentElement.onmousemove=function(event){\n  currentEvent = event;\n}\n\nsetInterval(function(){\n  if (currentEvent && prevEvent){\n    movement_x = Math.abs(currentEvent.screenX - prevEvent.screenX);\n    movement_y = Math.abs(currentEvent.screenY - prevEvent.screenY);\n    movement = (movement*10 + 5 + Math.sqrt(Math.pow(movement_x,2) + Math.pow(movement_y,2)))/11.;\n    // movement is the \"smoothed\" velocity of the mouse (takes average of 10 * past velocity and current velocity)\n    // determines thickness of stroke\n  }\n  prevEvent = currentEvent;\n},5);\n\nfunction translate_point( p, m ){\n  return p + Math.pow(p - m,3)/1000;\n}\n\nfunction rand_color() {\n  bc1 = pc1;\n  bc2 = pc2;\n  bc3 = pc3;\n  var temp;\n  switch (Math.floor(Math.random() * 3)){\n    case 0:\n      temp = pc1;\n      pc1 = pc2;\n      pc2 = temp;\n      break;\n    case 1:\n      temp = pc1;\n      pc1 = pc3;\n      pc3 = temp;\n      break;\n    case 2:\n      temp = pc2;\n      pc2 = pc3;\n      pc3 = temp;\n      break;\n    default:\n      break;\n  }\n  if (pc1 !== 0 && pc1 !== 255){\n    pc1 = Math.floor(Math.random() * 253) + 1;\n  }\n  if (pc2 !== 0 && pc2 !== 255){\n    pc2 = Math.floor(Math.random() * 253) + 1;\n  }\n  if (pc3 !== 0 && pc3 !== 255){\n    pc3 = Math.floor(Math.random() * 253) + 1;\n  }\n}\n\nconst sketch = p5 => {\n  p5.setup = () => {\n    p5.createCanvas(p5.windowWidth, p5.windowHeight);\n    p5.stroke(\"#000000\");\n    portal_x = p5.windowWidth/2 - 25;\n    portal_y = p5.windowHeight/2 - 25;\n    pc1 = 100;\n    pc2 = 0;\n    pc3 = 255;\n    bc1 = 255;\n    bc2 = 100;\n    bc3 = 100;\n  };\n\n\tp5.draw = () => {\n        p5.clear();\n        if (p5.mouseX > portal_x && p5.mouseX < portal_x + 50 &&\n            p5.mouseY > portal_y && p5.mouseY < portal_y + 50 && !changing){\n          drawing = true;\n          changing = true;\n          temp_portal_x = portal_x;\n          temp_portal_y = portal_y;\n          size = 50;\n        }\n        \n        //background\n        p5.strokeWeight(0);\n        console.log(.8/(Math.abs(portal_x - p5.mouseX) + 0.1));\n        p5.fill(bc1, bc2, bc3, 50000/(Math.sqrt(Math.pow(portal_x - p5.mouseX,2) + \n                                                Math.pow(portal_y - p5.mouseY,2)) + 1));\n        p5.rect(0, 0, p5.windowWidth, p5.windowWidth);\n\n        if (!drawing){\n\n          //first portal\n          p5.fill(pc1, pc2, pc3, [1]);\n          p5.rect(portal_x, portal_y, 50, 50);\n\n        } else {\n\n          // all strokes\n          if (p5.mouseX !== 0 || p5.mouseX !== p5.pmouseX || p5.mouseY !== p5.pmouseY){      \n            lines.push(new Line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY, movement));\n          }\n          for (var i = 0; i < lines.length; i++) {\n            p5.strokeWeight(lines[i].weight);\n\n            // if the mouse is close to a point of a line, the point will \n            // move be drawn close to the mouse\n\n            p5.line(translate_point(lines[i].x, p5.mouseX), \n                    translate_point(lines[i].y, p5.mouseY),\n                    translate_point(lines[i].px, p5.mouseX),\n                    translate_point(lines[i].py, p5.mouseY));\n          }\n\n          //hidden portal\n          p5.strokeWeight(0);\n          p5.fill(pc1, pc2, pc3, [1]);\n          if (changing){\n\n            if (temp_portal_x > 0){\n              temp_portal_x = Math.max(temp_portal_x - 45, 0);\n            } \n            if (temp_portal_y > 0){\n              temp_portal_y = Math.max(temp_portal_y - 45, 0);\n            }\n            if (size < p5.windowWidth){\n            size+=100;\n            } else {\n              changing = false;\n              portal_x = Math.floor(Math.random() * (p5.windowWidth - 120) + 60);\n              portal_y = Math.floor(Math.random() * (p5.windowHeight - 120) + 60);\n              rand_color();\n              lines = [];\n            }\n            p5.rect(temp_portal_x,\n            temp_portal_y, \n            size, \n            size);\n          } else {\n            p5.rect(translate_point(portal_x, p5.mouseX),\n            translate_point(portal_y, p5.mouseY), \n            45 + Math.pow(portal_x - p5.mouseX,2)/50, \n            45 + Math.pow(portal_y - p5.mouseY,2)/50);\n          }\n        } \n\n        //mouse\n        p5.noFill();\n        p5.strokeWeight(movement);\n        p5.ellipse(p5.mouseX, p5.mouseY, movement * 5, movement * 5);\n\t\t\t};\t\n\n  function Line(x, y, px, py, weight) {\n    this.x = x;\n    this.y = y;\n    this.px = px;\n    this.py = py;\n    this.weight = weight;\n  }\n};\n\nfunction Canvas(props) {\n  return <P5Wrapper sketch={sketch} />;\n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport Canvas from \"./canvas\";\nimport './App.css';\n\nfunction preventBehavior(e) {\n  e.preventDefault(); \n};\n\ndocument.addEventListener(\"touchmove\", preventBehavior, {passive: false});\n\nclass App extends Component {\n  render() {\n    return (\n      <div class=\"dotcursor\">\n        <div class = \"Canvas\">\n        <Canvas id=\"myCanvas\" ></Canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["currentEvent","prevEvent","movement_x","movement_y","lines","movement","document","documentElement","onmousemove","event","setInterval","Math","abs","screenX","screenY","sqrt","pow","sketch","p5","curr_color","color_options","Line","x","y","px","py","weight","color","this","setup","createCanvas","windowWidth","windowHeight","noFill","draw","clear","ellipse","mouseX","mouseY","pmouseX","pmouseY","push","i","length","strokeWeight","stroke","line","keyPressed","key","Canvas","props","react_default","a","createElement","P5Wrapper_default","addEventListener","e","preventDefault","passive","App","class","className","canvas","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76a6515a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\n\nvar lines = [];       // all lines\nvar line_count = [];  // stores number of lines for every stroke\nlet temp_line = [];\t\t// stores last 'undo' line\nvar lc = 0;           // line count for current stroke\nvar sc = 0;           // stroke count\nvar currentEvent, prevEvent;\nvar movement_x, movement_y, movement = 5; // base stroke width is 5\nvar mu = false;       //mouse up\n\ndocument.documentElement.onmousemove=function(event){\n  currentEvent = event;\n}\n\nsetInterval(function(){\n  if (currentEvent && prevEvent){\n    movement_x = Math.abs(currentEvent.screenX - prevEvent.screenX);\n    movement_y = Math.abs(currentEvent.screenY - prevEvent.screenY);\n    movement = (movement*10 + 5 + Math.sqrt(Math.pow(movement_x,2) + Math.pow(movement_y,2)))/11.;\n    // movement is the \"smoothed\" velocity of the mouse (takes average of 10 * past velocity and current velocity)\n    // determines thickness of stroke\n  }\n  prevEvent = currentEvent;\n},5);\n\nconst sketch = p5 => {\n  let curr_color;\n\n  const color_options = {\n    scheme_1: [\"#94EBD8\", \"#00B349\"],\n    scheme_2: [\"#983275\", \"#FF6F01\"],\n    scheme_3: [\"#C3A706\", \"#329290\"]\n  };\n\n  p5.setup = () => {\n    p5.createCanvas(p5.windowWidth, p5.windowHeight);\n    curr_color = p5.color(\"#000000\");\n    p5.noFill();\n  };\n\n\tp5.draw = () => {\n        p5.clear();\n        //p5.line(p5.mouseX,p5.mouseY,\n        //        p5.mouseX + 30 + p5.mouseX/10,\n        //        p5.mouseY - 30 - p5.mouseY/10);\n        p5.ellipse(p5.mouseX, p5.mouseY, movement * 5, movement * 5);\n        if (p5.mouseX != 0 || p5.mouseX != p5.pmouseX || p5.mouseY != p5.pmouseY){      \n          lines.push(new Line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY, movement,curr_color));\n        }\n\t\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\t\tp5.strokeWeight(lines[i].weight);\n\t\t      p5.stroke(lines[i].color);\n\n\t\t\t\t\t// if the mouse is close to a point of a line, the point will \n\t\t\t\t\t// move be drawn close to the mouse\n\n\t\t      p5.line(lines[i].x + Math.pow(lines[i].x - p5.mouseX,3)/1000, \n\t\t                lines[i].y + Math.pow(lines[i].y - p5.mouseY,3)/1000, \n\t\t               lines[i].px +  Math.pow(lines[i].px - p5.mouseX,3)/1000, \n\t\t                lines[i].py + Math.pow(lines[i].py - p5.mouseY,3)/1000);\n\t\t\t\t  }\n\t\t\t};\n\t/*\t\n\n  p5.mousePressed = () => {\n\t\tmovement_x = 5;\n\t\tmovement_y = 5;\n\t\tmovement = 5;\n    mu = false;\n    lc = 0;\n  };\n\n  p5.mouseDragged = () => {\n    lines.push(new Line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY, 5,curr_color));\n    lc++;\n  };\n\n  \n  p5.mouseReleased = () => {\n    line_count[sc] = lc;\n    sc++;\n    mu = true;\n  };\n*/\n  p5.keyPressed = () => {\n    switch (p5.key) {\n      case \"R\":\n      case \"r\":\n\t\t\t\tlines = [];       // all lines\n        line_count = [];  // stores number of lines for every stroke\n\t\t\t\ttemp_line = [];\t\t// stores last 'undo' line\n\t\t\t\tlc = 0;           // line count for current stroke\n\t\t\t\tsc = 0;           // stroke count\n\t\t\t\tp5.clear();\n        curr_color = p5.color(\"#000000\");\n        break;\n      case \"T\":\n        curr_color = p5.color(color_options.scheme_1[0]);\n        break;\n      case \"G\":\n        curr_color = p5.color(color_options.scheme_1[1]);\n        break;\n      case \"Y\":\n        curr_color = p5.color(color_options.scheme_2[0]);\n        break;\n      case \"H\":\n        curr_color = p5.color(color_options.scheme_2[1]);\n        break;\n      case \"U\":\n        curr_color = p5.color(color_options.scheme_3[0]);\n        break;\n      case \"J\":\n        curr_color = p5.color(color_options.scheme_3[1]);\n        break;\n       default:\n       \tbreak;\n    }\n    \n\n    if (p5.key === \"D\" || p5.key === \"d\") {\n      if (lines.length > 0 && mu){\n      \t  //add deleted lines to deleted_lines array\n      \t  temp_line = lines.slice(lines.length - line_count[sc-1], lines.length);\t//store last stroke in temp array\n          lines.splice(lines.length - line_count[sc-1], line_count[sc-1]); //remove Drawing from array\n          sc--;\n          p5.clear();\n      }\n    }\n\n    if (p5.key === \"Q\" || p5.key === \"q\") {\n    \tif (mu){\n    \t\tlines = lines.concat(temp_line);\t//add line back to lines array\n    \t\tsc++;\n    \t}\n    }\n  };\n\n  function Line(x, y, px, py, weight, color) {\n    this.x = x;\n    this.y = y;\n    this.px = px;\n    this.py = py;\n    this.weight = weight;\n    this.color = color;\n  }\n};\n\nfunction Canvas(props) {\n  return <P5Wrapper sketch={sketch} />;\n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport Canvas from \"./canvas\";\nimport './App.css';\n\nfunction preventBehavior(e) {\n  e.preventDefault(); \n};\n\ndocument.addEventListener(\"touchmove\", preventBehavior, {passive: false});\n\nclass App extends Component {\n  render() {\n    return (\n      <div class=\"dotcursor\">\n        <div className=\"App-logo\">\n          <h1>Welcome to Hell</h1>\n        </div>\n        <div class = \"Canvas\">\n        <Canvas id=\"myCanvas\" ></Canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}